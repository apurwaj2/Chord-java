diff --git a/Auxiliary.java b/Auxiliary.java
index 88f4115..37c4c47 100644
--- a/Auxiliary.java
+++ b/Auxiliary.java
@@ -1,12 +1,10 @@
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.net.UnknownHostException;
-import java.nio.ByteBuffer;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 
@@ -63,7 +61,7 @@ public class Auxiliary {
         return c;
     }
 
-    public static String sendRequest(InetSocketAddress server, String request) throws ClassNotFoundException {
+    public static String sendRequest(InetSocketAddress server, String request){
 
         String response = null;
 
@@ -74,25 +72,36 @@ public class Auxiliary {
             oos = new ObjectOutputStream(socket.getOutputStream());
           //  System.out.println("Sending request to Socket Server");
             oos.writeObject(request);
+
+            try {
+                Thread.sleep(60);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
             //read the server response message
-            ois = new ObjectInputStream(socket.getInputStream());
-            response = (String) ois.readObject();
-          //  System.out.println("Response: " + response);
-            //close resources
-            ois.close();
+            try {
+//                input = talkSocket.getInputStream();
+                ois = new ObjectInputStream(socket.getInputStream());
+            } catch (IOException e) {
+                System.out.println("Cannot get input stream from "+server.toString()+"\nRequest is: "+ois+"\n");
+            }
+
+            if(ois != null) {
+                response = (String) ois.readObject();
+                ois.close();
+            }
+
             oos.close();
-        } catch (UnknownHostException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
+        } catch (IOException | ClassNotFoundException e) {
             e.printStackTrace();
         }
 
         return response;
     }
 
-    public static InetSocketAddress requestAddress(InetSocketAddress server, String request) throws ClassNotFoundException {
+    public static InetSocketAddress requestAddress(InetSocketAddress server, String request) {
 
-      //
         //  System.out.println("Entered requestAddress");
         String response = null;
 
diff --git a/CheckPredecessor.java b/CheckPredecessor.java
index 87960b5..0ddc71f 100644
--- a/CheckPredecessor.java
+++ b/CheckPredecessor.java
@@ -1,23 +1,16 @@
 import java.net.InetSocketAddress;
 
-import static java.lang.Thread.sleep;
 
-public class CheckPredecessor implements Runnable {
+public class CheckPredecessor extends Thread {
 
     Node node;
     boolean keepAlive;
-    private Thread worker;
 
     CheckPredecessor(Node n) {
         node = n;
         keepAlive = true;
     }
 
-    public void start() {
-        worker = new Thread(this);
-        worker.start();
-    }
-
     public void stopThread() {
         keepAlive = false;
     }
@@ -27,17 +20,13 @@ public class CheckPredecessor implements Runnable {
             InetSocketAddress predecessor = node.getPredecessor();
             if (predecessor != null){
                 String response = null;
-                try {
-                    response = Auxiliary.sendRequest(predecessor, "KEEP");
-                } catch (ClassNotFoundException e) {
-                    e.printStackTrace();
-                }
+                response = Auxiliary.sendRequest(predecessor, "KEEP");
                 if (response == null || !response.equals("ALIVE")) {
                     node.setPredecessor(null);
                 }
             }
             try {
-                sleep(500);
+                Thread.sleep(60);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
diff --git a/FingerTable.java b/FingerTable.java
index 38066f2..b8ddbe0 100644
--- a/FingerTable.java
+++ b/FingerTable.java
@@ -24,7 +24,7 @@ public class FingerTable {
     public void deleteFingerEntry(InetSocketAddress address) {
         for (int i = 32; i > 0; i--) {
             InetSocketAddress fingerAddress = fingerTable.get(i);
-            if(fingerAddress.equals(address))
+            if(fingerAddress != null && fingerAddress.equals(address))
                 fingerTable.put(i, null);
         }
     }
diff --git a/FixFingers.java b/FixFingers.java
index 8057854..2e405d8 100644
--- a/FixFingers.java
+++ b/FixFingers.java
@@ -8,63 +8,56 @@ import java.util.logging.FileHandler;
 import java.util.logging.Logger;
 import java.util.logging.SimpleFormatter;
 
-import static java.lang.Thread.sleep;
 
-public class FixFingers implements Runnable {
+public class FixFingers extends Thread {
 
-        Node node;
-        Random random;
-        boolean keepAlive;
-        private Thread worker;
-        Logger logger = Logger.getLogger("MyLog");
-        FileHandler fh;
+    Node node;
+    Random random;
+    boolean keepAlive;
+    Logger logger = Logger.getLogger("MyLog");
+    FileHandler fh;
 
-        FixFingers(Node n) {
-            node = n;
-            keepAlive = true;
-            random = new Random();
+    FixFingers(Node n) {
+        node = n;
+        keepAlive = true;
+        random = new Random();
 
-            try {
-
-                // This block configure the logger with handler and formatter
-                fh = new FileHandler("/home/apurwa/IdeaProjects/ImplementationChord/FixFingers.log");
-                logger.addHandler(fh);
-                SimpleFormatter formatter = new SimpleFormatter();
-                fh.setFormatter(formatter);
-                logger.setUseParentHandlers(false);
+        try {
 
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
+            // This block configure the logger with handler and formatter
+            fh = new FileHandler("/home/apurwa/IdeaProjects/ImplementationChord/FixFingers.log");
+            logger.addHandler(fh);
+            SimpleFormatter formatter = new SimpleFormatter();
+            fh.setFormatter(formatter);
+            logger.setUseParentHandlers(false);
 
-        public void start() {
-            worker = new Thread(this);
-            worker.start();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
+    }
 
-        public void stopThread() {
-            keepAlive = false;
-        }
+    public void stopThread() {
+        keepAlive = false;
+    }
 
-        @SneakyThrows
-        public void run() {
-            while (keepAlive) {
-                int randomNum = random.nextInt(31) + 2;
-                InetSocketAddress fingerId = null;
-                try {
-                    fingerId = node.findSuccessor(Auxiliary.getFingerId(node.getNodeId(),randomNum,32));
-                } catch (NoSuchAlgorithmException | ClassNotFoundException e) {
-                    e.printStackTrace();
-                }
-                node.updateFingerTable(randomNum, fingerId);
-                logger.info("updating finger entry for " + node.getPort() + " at " + randomNum + " -> " + fingerId.getPort() );
+    @SneakyThrows
+    public void run() {
+        while (keepAlive) {
+            int randomNum = random.nextInt(31) + 2;
+            InetSocketAddress fingerId = null;
+            try {
+                fingerId = node.findSuccessor(Auxiliary.getFingerId(node.getNodeId(),randomNum,32));
+            } catch (NoSuchAlgorithmException | ClassNotFoundException e) {
+                e.printStackTrace();
+            }
+            node.updateFingerTable(randomNum, fingerId);
+            logger.info("updating finger entry for " + node.getPort() + " at " + randomNum + " -> " + fingerId.getPort() );
 
-                try {
-                    sleep(600);
-                } catch (InterruptedException e) {
-                    e.printStackTrace();
-                }
+            try {
+                Thread.sleep(200);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
             }
         }
+    }
 }
diff --git a/Listener.java b/Listener.java
index 3496fca..64b8548 100644
--- a/Listener.java
+++ b/Listener.java
@@ -1,41 +1,35 @@
 import java.io.IOException;
-import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.security.NoSuchAlgorithmException;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.FileHandler;
 import java.util.logging.Logger;
 import java.util.logging.SimpleFormatter;
 
-public class Listener implements Runnable {
+public class Listener extends Thread{
 
     private Node node;
     private ServerSocket server;
-    private AtomicBoolean keepAlive;
-    private Thread worker;
+    private boolean keepAlive;
+
     Logger logger = Logger.getLogger("MyLog");
     FileHandler fh;
 
-    public void start() {
-        worker = new Thread(this);
-        worker.start();
-    }
 
-    public void stop() {
-        keepAlive.set(false);
+    public void stopThread() {
+        keepAlive = false;
     }
 
     public Listener(Node n) {
         node = n;
-        keepAlive = new AtomicBoolean(true);
+        keepAlive = true;
         try {
             server = new ServerSocket(node.getPort());
         } catch (IOException e) {
-            System.err.println("Could not listen on port " + node.getPort());
+            System.out.println("Could not listen on port " + node.getPort());
         }
 
         try {
@@ -121,7 +115,7 @@ public class Listener implements Runnable {
     @Override
     public void run()
     {
-        while(keepAlive.get()) {
+        while(keepAlive) {
 
             try {
                 Socket clientSocket = server.accept();
@@ -140,14 +134,10 @@ public class Listener implements Runnable {
                 clientSocket.close();
             } catch (IOException | ClassNotFoundException | NoSuchAlgorithmException e) {
                 e.printStackTrace();
-                System.err.println("Could not accept connection on port " + node.getPort());
+                System.out.println("Could not accept connection on port " + node.getPort());
+                throw new RuntimeException("Cannot accept connection request", e);
             }
 
         }
-        try {
-            server.close();
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
     }
 }
diff --git a/Node.java b/Node.java
index 496568c..0f698bf 100644
--- a/Node.java
+++ b/Node.java
@@ -1,6 +1,3 @@
-import lombok.Builder;
-
-import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.security.NoSuchAlgorithmException;
 
@@ -30,7 +27,7 @@ public class Node {
         this.socketAddress = socketAddress;
     }
 
-    public void setPredecessor(InetSocketAddress predecessor) {
+    public synchronized void setPredecessor(InetSocketAddress predecessor) {
         System.out.println("setting predecessor of " + this.port + ":" + ((predecessor==null)? " ":predecessor.getPort()));
         this.predecessor = predecessor;
     }
@@ -145,7 +142,7 @@ public class Node {
 
                 // remove it from finger table
                 else {
-                    fingerTable.deleteFingerEntry(fingerAddress);
+                    modifyFingerEntries(-2, fingerAddress);
                 }
             }
 
@@ -221,7 +218,7 @@ public class Node {
         return n;
     }
 
-    public String notifySuccessor(InetSocketAddress S) throws ClassNotFoundException {
+    public String notifySuccessor(InetSocketAddress S) {
         if (S != null && !S.equals(getSocketAddress())) {
             String port = String.valueOf(getPort());
             String request = "TELL-SUCCESSOR_" + port;
@@ -232,12 +229,20 @@ public class Node {
     }
 
 
-    public void handleNotification (InetSocketAddress newPredecessor) throws NoSuchAlgorithmException {
+    public void handleNotification (InetSocketAddress newPredecessor) throws NoSuchAlgorithmException, ClassNotFoundException {
         System.out.println("handle notification : " + getPort() + " -> " + (newPredecessor==null?" ":newPredecessor.getPort()));
-        if (getPredecessor() == null) {
+        if (getPredecessor() == null || getPredecessor().equals(newPredecessor)) {
             setPredecessor(newPredecessor);
         }
         else {
+
+            String response  = Auxiliary.sendRequest(getPredecessor(), "KEEP");
+            System.out.println("Response for check KEEP for " + getPredecessor() + "->" + response);
+            if (response == null || !response.equals("ALIVE")) {
+                setPredecessor(newPredecessor);
+                return;
+            }
+
             long oldPredecessor = Auxiliary.getHashAddress(getPredecessor());
             long oldPredecessorRelativeId = Auxiliary.getRelativeId(nodeId, oldPredecessor);
             long newPredecessorRelativeId = Auxiliary.getRelativeId(Auxiliary.getHashAddress(newPredecessor), oldPredecessor);
@@ -250,7 +255,7 @@ public class Node {
         }
     }
 
-    public void fillSuccessor() throws ClassNotFoundException {
+    public void fillSuccessor() {
         InetSocketAddress succ = getSuccessor();
         if (succ == null || succ.equals(socketAddress)) {
             for (int i = 2; i <= 32; i++) {
@@ -271,7 +276,7 @@ public class Node {
         }
     }
 
-    public void deleteSuccessor() throws ClassNotFoundException {
+    public void deleteSuccessor(){
 
         // Already null
         InetSocketAddress succ = getSuccessor();
@@ -329,7 +334,7 @@ public class Node {
         }
     }
 
-    public void updateFingerTable(int i, InetSocketAddress address) throws ClassNotFoundException {
+    public void updateFingerTable(int i, InetSocketAddress address){
         fingerTable.updateFingerEntry(i, address);
 
         if (i == 1 && address != null && !socketAddress.equals(address)) {
@@ -337,4 +342,21 @@ public class Node {
         }
     }
 
+    public synchronized void modifyFingerEntries(int position, InetSocketAddress address) {
+
+        if (position > 0 && position <= 32) {
+            updateFingerTable(position, address);
+        } else if (position == -1) {
+            deleteSuccessor();
+        } else if (position == -2) {
+            fingerTable.deleteFingerEntry(address);
+        } else if (position == -3) {
+            fillSuccessor();
+        } else {
+            System.out.println("Invalid option for modifyFingerEntries");
+        }
+
+    }
+
+
 }
diff --git a/Stabilize.java b/Stabilize.java
index b20fd3f..f5b9ebd 100644
--- a/Stabilize.java
+++ b/Stabilize.java
@@ -1,25 +1,35 @@
 import lombok.SneakyThrows;
 
-import java.math.BigInteger;
+import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.security.NoSuchAlgorithmException;
+import java.util.logging.FileHandler;
+import java.util.logging.Logger;
+import java.util.logging.SimpleFormatter;
 
-import static java.lang.Thread.sleep;
 
-public class Stabilize implements Runnable {
+public class Stabilize extends Thread {
 
     Node node;
     boolean keepAlive;
-    private Thread worker;
+    Logger logger;
+    FileHandler fh;
 
     Stabilize(Node n) {
         node = n;
         keepAlive = true;
-    }
+        try {
+            logger = Logger.getLogger("MyLog_" + node.getPort());
+            // This block configure the logger with handler and formatter
+            fh = new FileHandler("/home/apurwa/IdeaProjects/ImplementationChord/Stabilize.log");
+            logger.addHandler(fh);
+            SimpleFormatter formatter = new SimpleFormatter();
+            fh.setFormatter(formatter);
+            logger.setUseParentHandlers(false);
 
-    public void start() {
-        worker = new Thread(this);
-        worker.start();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     public void stopThread() {
@@ -29,33 +39,30 @@ public class Stabilize implements Runnable {
     @SneakyThrows
     public void run() {
         while (keepAlive) {
+            logger.info("Response : " + node.getPort());
             InetSocketAddress successor = node.getSuccessor();
+            logger.info("Getsuccessor for  " + node.getPort() + "->" + successor);
             if (successor == null || successor.equals(node.getSocketAddress())) {
-                node.fillSuccessor();
+                logger.info("Succesor is null for  " + node.getPort());
+                node.modifyFingerEntries(-3,null);
             }
 
-
             successor = node.getSuccessor();
             if (successor != null && !successor.equals(node.getSocketAddress())) {
 
                 // get predecessor
                 InetSocketAddress x = null;
-                try {
-                    x = Auxiliary.requestAddress(successor, "GET-PREDECESSOR");
-                } catch (ClassNotFoundException e) {
-                    e.printStackTrace();
-                }
+                x = Auxiliary.requestAddress(successor, "GET-PREDECESSOR");
+                logger.info("Getpredecessor for " +  node.getPort() + " successor  " + successor.getPort());
                 if (x == null) {
-                    try {
-                        node.deleteSuccessor();
-                    } catch (ClassNotFoundException e) {
-                        e.printStackTrace();
-                    }
+                    logger.info("Deleting successor as x successor is null " + node.getPort());
+                    System.out.println("Successor deleted " + node.getPort());
+                    node.modifyFingerEntries(-1, null);
                 }
 
                 // else if successor's predecessor is not itself
                 else if (!x.equals(successor)) {
-//                    System.out.println("REached HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
+                    logger.info("predecessor != successor for " +  node.getPort() + " successor  " + successor.getPort() + "->" + x.getPort());
                     long successorRelativeId = 0;
                     try {
                         successorRelativeId = Auxiliary.getRelativeId(Auxiliary.getHashAddress(successor), node.getNodeId());
@@ -74,16 +81,12 @@ public class Stabilize implements Runnable {
                 }
                 // successor's predecessor is successor itself, then notify successor
                 else {
-                    try {
-                        node.notifySuccessor(successor);
-                    } catch (ClassNotFoundException e) {
-                        e.printStackTrace();
-                    }
+                    node.notifySuccessor(successor);
                 }
             }
 
             try {
-                sleep(240);
+                Thread.sleep(60);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
